import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static boolean[] visit;
    static int[] cnt;
    static ArrayList<Integer>[] adj;
    static int N, M;
    static Queue<Integer> queue;
//    static BufferedWriter bw;

    static StringBuilder sb;


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        sb = new StringBuilder();

        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        visit = new boolean[N+1];
        cnt = new int[N+1];
        adj = new ArrayList[N+1];
        queue = new LinkedList<>();

        for (int n = 0 ; n <= N ; n++){
            adj[n] = new ArrayList<Integer>();
        }

        for (int m = 0 ; m < M ; m++){
            st = new StringTokenizer(br.readLine(), " ");

            int to = Integer.parseInt(st.nextToken());
            int from = Integer.parseInt(st.nextToken());

            adj[to].add(from);
            cnt[from] += 1;
        }

        find();
        topologySort();

//        bw.flush();
//        bw.close();
        System.out.println(sb);

    }

    static void topologySort() throws IOException {

        int time = 0;

        while (time < N){

//            int size = queue.size();
//
//            for (int s = 0 ; s < size ; s++){
                int num = queue.poll();

                for (int t = 0 ; t < adj[num].size() ; t++){
                    int temp = (int) adj[num].get(t);
                    cnt[temp] = cnt[temp] - 1;
                }
                find2(num);
//            }
            time++;
        }
    }

    static void find() throws IOException {
        for (int n = 1 ; n <= N ; n++){
            if(cnt[n] == 0 && !visit[n]){
                queue.add(n);
                visit[n] = true;
//                bw.write(n +" ");
                sb.append(n+" ");
            }
        }
    }

    static void find2(int num){
        for (Integer temp : adj[num]){
            if(cnt[temp] == 0 && ! visit[temp]){
                queue.add(temp);
                visit[temp] = true;
                sb.append(temp+" ");
            }
        }
    }
}
